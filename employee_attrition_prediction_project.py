# -*- coding: utf-8 -*-
"""Employee Attrition Prediction Project

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1n6rv22kTJBqnrxOAAftW6R3cP856JAPH
"""

import pandas as pd

df1 = pd.read_csv('HR_Attrition Data.csv')

df1.head()

df2 = pd.read_csv('HR_New_data.csv')

df2.head()

# Merging both datasets

df = pd.merge(left=df1,right=df2,left_on="Employee No.",right_on="emp_id")

df.head()

df.columns

"""# **Exploratry Data Analysis**"""

# Checking Target Variable

df['Attrition'].value_counts()

import matplotlib.pyplot as plt
import seaborn as sns

# Plot distribution of Attrition (target variable)
plt.figure(figsize=(6,4))
sns.countplot(x='Attrition', data=df)
plt.title('Distribution of Attrition')
plt.show()

# Plot distribution of a few key categorical variables
categorical_cols1 = ['Work Location', 'Department', 'Education']
for col in categorical_cols1:
    plt.figure(figsize=(7,5))
    sns.countplot(x=col, data=df)
    plt.title(f'Distribution of {col}')
    plt.show()

# Plot distribution of a few key categorical variables
categorical_cols2 = ['Job Role']
for col in categorical_cols2:
    plt.figure(figsize=(14,5))
    sns.countplot(x=col, data=df)
    plt.title(f'Distribution of {col}')
    plt.show()

# Histograms for numerical features
numerical_cols = ['Age', 'Monthly Income', 'Job Satisfaction', 'Work Life Balance']
df[numerical_cols].hist(bins=20, figsize=(12, 10), layout=(2, 2))
plt.show()

# Categorical vs Target (Attrition)
for col in categorical_cols1:
    plt.figure(figsize=(8,4))
    sns.countplot(x=col, hue='Attrition', data=df)
    plt.title(f'{col} vs Attrition')
    plt.show()

# Categorical vs Target (Attrition)
for col in categorical_cols2:
    plt.figure(figsize=(14,5))
    sns.countplot(x=col, hue='Attrition', data=df)
    plt.title(f'{col} vs Attrition')
    plt.show()

# Boxplots for numerical features vs Attrition
for col in numerical_cols:
    plt.figure(figsize=(8,4))
    sns.boxplot(x='Attrition', y=col, data=df)
    plt.title(f'{col} vs Attrition')
    plt.show()

# Detecting outliers using boxplots
for col in ['Monthly Income', 'average_montly_hours']:
    plt.figure(figsize=(6,4))
    sns.boxplot(data=df[col])
    plt.title(f'Boxplot of {col}')
    plt.show()

"""# **Data Preprocessing**"""

# Check Missing Values
df.isna().sum()

df = df[['Gender', 'Education', 'Education Field', 'Job Role',
       'Department', 'Work Location','Attrition', 'Age',
       'Avg. Satisfaction Score',
       'Environment Satisfaction', 'Job Involvement',
       'Job Satisfaction', 'Monthly Income', 'Percent Salary Hike',
       'Performance Rating', 'Relationship Satisfaction',
       'Work Life Balance','last_evaluation', 'number_project',
       'average_montly_hours', 'Work_accident', 'promotion_last_5years']]

df.info()

df.head()

#Drop rows with missing values
df.dropna(inplace=True)

# One-hot encoding for categorical variables
df = pd.get_dummies(df, columns=['Gender', 'Education', 'Education Field', 'Job Role', 'Department', 'Work Location'], drop_first=True)

df.head()

# Convert binary columns to 0 and 1
df['Attrition'] = df['Attrition'].apply(lambda x: 1 if x == 'Yes' else 0)

df.info()

df.describe()

from sklearn.preprocessing import StandardScaler

# Scaling numerical features
scaler = StandardScaler()
numerical_features = ['Age', 'Monthly Income', 'Percent Salary Hike', 'average_montly_hours', 'last_evaluation', 'number_project']
df[numerical_features] = scaler.fit_transform(df[numerical_features])

"""# **Model Building**"""

from sklearn.model_selection import train_test_split

# Define features and target variable
X = df.drop(columns=['Attrition'])
y = df['Attrition']

# Split data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

"""# **Model Training**"""

from sklearn.ensemble import RandomForestClassifier

# Initialize and train the model
model = RandomForestClassifier(random_state=42)
model.fit(X_train, y_train)

"""# **Model Evaluation**"""

from sklearn.metrics import accuracy_score, confusion_matrix, classification_report, roc_auc_score

# Predictions on test set
y_pred = model.predict(X_test)

# Evaluation metrics
print("Accuracy:", accuracy_score(y_test, y_pred))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("Classification Report:\n", classification_report(y_test, y_pred))
print("ROC-AUC Score:", roc_auc_score(y_test, model.predict_proba(X_test)[:, 1]))

"""# **Model Export**"""

import joblib

# Save the trained model
joblib.dump(model, 'employee_attrition_model.pkl')

"""# **Deployment and Reporting**"""

# Load the model
loaded_model = joblib.load('employee_attrition_model.pkl')

import numpy as np
import pandas as pd

# Example new data (for 5 employees)
new_employee_data = {
    'Age': [28, 35, 40, 50, 25],
    'Avg. Satisfaction Score': [3.5, 4.2, 3.0, 4.0, 3.8],
    'Environment Satisfaction': [3, 4, 2, 4, 3],
    'Job Involvement': [3, 3, 4, 3, 2],
    'Job Satisfaction': [4, 3, 3, 2, 4],
    'Monthly Income': [45000, 60000, 85000, 70000, 50000],
    'Percent Salary Hike': [15, 12, 10, 8, 13],
    'Performance Rating': [3, 4, 3, 3, 4],
    'Relationship Satisfaction': [3, 2, 4, 3, 2],
    'Work Life Balance': [3, 4, 2, 3, 4],
    'last_evaluation': [0.78, 0.85, 0.65, 0.88, 0.75],
    'number_project': [4, 3, 5, 2, 3],
    'average_montly_hours': [210, 180, 220, 160, 200],
    'Work_accident': [0, 0, 1, 0, 0],
    'promotion_last_5years': [0, 1, 0, 0, 0],
    'Gender_Male': [1, 0, 1, 0, 1],
    'Education_Bachelor\'s Degree': [1, 0, 0, 1, 1],
    'Education_Doctoral Degree': [0, 0, 1, 0, 0],
    'Education_High School': [0, 1, 0, 0, 0],
    'Education_Master\'s Degree': [0, 1, 0, 0, 0],
    'Education Field_Life Sciences': [0, 1, 0, 1, 1],
    'Education Field_Marketing': [0, 0, 1, 0, 0],
    'Education Field_Medical': [1, 0, 0, 0, 1],
    'Education Field_Other': [0, 0, 1, 0, 0],
    'Education Field_Technical Degree': [0, 1, 0, 1, 0],
    'Job Role_Human Resources': [0, 1, 0, 0, 0],
    'Job Role_Laboratory Technician': [0, 0, 1, 0, 1],
    'Job Role_Manager': [1, 0, 0, 1, 0],
    'Job Role_Manufacturing Director': [0, 1, 0, 0, 0],
    'Job Role_Research Director': [0, 0, 1, 0, 0],
    'Job Role_Research Scientist': [0, 0, 0, 1, 0],
    'Job Role_Sales Executive': [1, 0, 0, 0, 1],
    'Job Role_Sales Representative': [0, 1, 0, 1, 0],
    'Department_R & D': [1, 0, 0, 0, 1],
    'Department_Sales': [0, 1, 0, 1, 0],
    'Work Location_Delhi': [0, 0, 1, 0, 0],
    'Work Location_Hydrabad': [1, 0, 0, 1, 1],
    'Work Location_Mumbai': [0, 1, 0, 0, 0],
    'Work Location_Noida': [0, 0, 1, 0, 0],
    'Work Location_Pune': [0, 1, 0, 1, 0]
}

# Convert to DataFrame
new_employee_df = pd.DataFrame(new_employee_data)

# Display new employee data
new_employee_df.head()

# Predict the attrition for the new employees
predictions = loaded_model.predict(new_employee_df)

# Add the predictions to the DataFrame
new_employee_df['Predicted_Attrition'] = predictions

# Display the predictions
new_employee_df[['Age', 'Monthly Income', 'Predicted_Attrition']]

